(window["webpackJsonpGUI"] = window["webpackJsonpGUI"] || []).push([[44],{

/***/ 2008:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "resources", function() { return /* binding */ resources; });

// CONCATENATED MODULE: ./src/addons/addons/script-snap/userscript.js
/* harmony default export */ var userscript = (async function (_ref) {
  let {
    addon,
    console
  } = _ref;
  const Blockly = await addon.tab.traps.getBlockly();
  let workspace = Blockly.getMainWorkspace();
  // Handle future workspaces
  const originalInit = Blockly.init_;
  Blockly.init_ = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    workspace = args[0];
    if (!addon.self.disabled) setGrid(true);
    return originalInit.call(this, ...args);
  };
  setGrid(true);
  addon.settings.addEventListener("change", () => setGrid(true));
  addon.self.addEventListener("disabled", () => setGrid(false));
  addon.self.addEventListener("reenabled", () => setGrid(true));
  function setGrid(enabled) {
    workspace.grid_.snapToGrid_ = enabled;
    if (enabled) workspace.grid_.spacing_ = addon.settings.get("grid");else workspace.grid_.spacing_ = 40;
    workspace.grid_.update(workspace.scale);
  }
});
// CONCATENATED MODULE: ./src/addons/addons/script-snap/_runtime_entry.js
/* generated by pull.js */

const resources = {
  "userscript.js": userscript
};

/***/ })

}]);