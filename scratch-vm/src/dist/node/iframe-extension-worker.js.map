{"version":3,"file":"iframe-extension-worker.js","sources":["webpack://VirtualMachine/./src/extension-support/tw-iframe-extension-worker.js","webpack://VirtualMachine/./src/extension-support/tw-iframe-extension-worker-entry.js"],"sourcesContent":["const uid = require('../util/uid');\nconst frameSource = require('./tw-load-script-as-plain-text!./tw-iframe-extension-worker-entry');\n\nconst none = \"'none'\";\nconst allow = '*';\nconst featurePolicy = {\n    'accelerometer': none,\n    'ambient-light-sensor': none,\n    'autoplay': none,\n    'battery': none,\n    'camera': none,\n    'display-capture': none,\n    'document-domain': none,\n    'encrypted-media': none,\n    'fullscreen': none,\n    'gamepad': allow,\n    'geolocation': none,\n    'gyroscope': none,\n    'magnetometer': none,\n    'microphone': none,\n    'midi': none,\n    'payment': none,\n    'picture-in-picture': none,\n    'publickey-credentials-get': none,\n    'speaker-selection': none,\n    'usb': none,\n    'vibrate': none,\n    'vr': none,\n    'screen-wake-lock': none,\n    'web-share': none,\n    'interest-cohort': none\n};\n\nconst generateAllow = () => Object.entries(featurePolicy)\n    .map(([name, permission]) => `${name} ${permission}`)\n    .join('; ');\n\nclass IframeExtensionWorker {\n    constructor () {\n        this.id = uid();\n        this.isRemote = true;\n        this.ready = false;\n        this.queuedMessages = [];\n\n        this.iframe = document.createElement('iframe');\n        this.iframe.className = 'tw-custom-extension-frame';\n        this.iframe.dataset.id = this.id;\n        this.iframe.style.display = 'none';\n        this.iframe.setAttribute('aria-hidden', 'true');\n        this.iframe.sandbox = 'allow-scripts';\n        this.iframe.allow = generateAllow();\n        document.body.appendChild(this.iframe);\n\n        window.addEventListener('message', this._onWindowMessage.bind(this));\n        const blob = new Blob([\n            // eslint-disable-next-line max-len\n            `<!DOCTYPE html><body><script>window.__WRAPPED_IFRAME_ID__=${JSON.stringify(this.id)};${frameSource}</script></body>`\n        ], {\n            type: 'text/html'\n        });\n        this.iframe.src = URL.createObjectURL(blob);\n    }\n\n    _onWindowMessage (e) {\n        if (!e.data || e.data.vmIframeId !== this.id) {\n            return;\n        }\n        if (e.data.ready) {\n            this.ready = true;\n            for (const {data, transfer} of this.queuedMessages) {\n                this.postMessage(data, transfer);\n            }\n            this.queuedMessages.length = 0;\n        }\n        if (e.data.message) {\n            this.onmessage({\n                data: e.data.message\n            });\n        }\n    }\n\n    onmessage () {\n        // Should be overridden\n    }\n\n    postMessage (data, transfer) {\n        if (this.ready) {\n            if (transfer) {\n                this.iframe.contentWindow.postMessage(data, '*', transfer);\n            } else {\n                this.iframe.contentWindow.postMessage(data, '*');\n            }\n        } else {\n            this.queuedMessages.push({data, transfer});\n        }\n    }\n}\n\nmodule.exports = IframeExtensionWorker;\n","throw new Error(\"Not supported in non-web environment\");"],"mappings":";;;;;;;;;;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AACA;AA2BA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AA3DA;AACA;AA4DA;;;;;;;;;;;AClGA;;;;A","sourceRoot":""}